/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright Decodable, Inc.
 *
 * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0
 */
plugins {
    id 'application'
    id 'java'
    id 'com.gradleup.shadow' version '8.3.2'
    id 'eclipse'
}

group = 'co.decodable.examples'
version = '0.2'

ext {
    flinkVersion = '1.19.2'
    kafkaConnectorVersion = '3.3.0-1.19'
    log4jVersion = '2.17.1'
    sdkVersion = '1.19.2-1.0.0.Beta9'
}

repositories {
    mavenLocal()
    mavenCentral()
}

application {
    mainClass = 'co.decodable.examples.cpdemo.DataStreamJob'
}

configurations {
    // Dependencies which are provided by Flink at runtime should be excluded from the uber JAR.
    // We use a custom configuration for this, which is similar to compileOnly except that we exclude these AND THEIR
    // TRANSITIVE DEPENDENCIES from shadowJar further down
    excludeFromShadow
}

tasks.withType(JavaCompile).configureEach {
    // Include the excludeFromShadow configuration in the compile classpath
    classpath += configurations.excludeFromShadow
}

tasks.withType(Javadoc).configureEach {
    // Include the excludeFromShadow configuration in the compile classpath
    classpath += configurations.excludeFromShadow
}

dependencies {
    annotationProcessor "co.decodable:decodable-pipeline-sdk:$sdkVersion"

    implementation "co.decodable:decodable-pipeline-sdk:$sdkVersion"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation "org.apache.flink:flink-json:$flinkVersion"

    // Kafka connector is bundled with the Flink image used by Decodable
    // Transitive dependencies of this should NOT be excluded (they contain Jackson, for instance)
    compileOnly "org.apache.flink:flink-connector-kafka:$kafkaConnectorVersion"

    excludeFromShadow "org.apache.flink:flink-streaming-java:$flinkVersion"
    excludeFromShadow "org.apache.flink:flink-table-api-java:$flinkVersion"
    excludeFromShadow "org.apache.flink:flink-table-api-java-bridge:$flinkVersion"
    excludeFromShadow "org.apache.flink:flink-table-planner_2.12:$flinkVersion"
    excludeFromShadow "org.apache.flink:flink-table-common:$flinkVersion"
    excludeFromShadow "org.apache.flink:flink-table-runtime:$flinkVersion"

    testImplementation "org.apache.flink:flink-connector-kafka:$kafkaConnectorVersion"
    testImplementation "commons-codec:commons-codec:1.18.0"
    testImplementation "org.apache.flink:flink-clients:$flinkVersion"
    testImplementation "org.apache.flink:flink-table-api-java:$flinkVersion"
    testImplementation "org.apache.flink:flink-table-api-java-bridge:$flinkVersion"
    testImplementation "org.apache.flink:flink-table-planner_2.12:$flinkVersion"
    testImplementation "org.apache.flink:flink-table-common:$flinkVersion"
    testImplementation "org.apache.flink:flink-table-runtime:$flinkVersion"
    testImplementation "org.apache.flink:flink-json:$flinkVersion"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.testcontainers:redpanda:1.18.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.18.3'

    testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    testImplementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    testImplementation 'org.assertj:assertj-core:3.24.2'
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

shadowJar {
  def exclude_modules = project
            .configurations
            .excludeFromShadow
            .resolvedConfiguration
            .getLenientConfiguration()
            .getAllModuleDependencies()
            .collect {
                it.name
            }
    dependencies {
        // exclude all compileOnly dependencies, including transitives, as
        // they are provided by Flink already
        exclude(dependency {
            exclude_modules.contains(it.name)
        })
        // pulled in by kafka-clients, but it's provided by Flink already
        exclude(dependency('org.slf4j:slf4j-api'))
    }

    mergeServiceFiles()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}
